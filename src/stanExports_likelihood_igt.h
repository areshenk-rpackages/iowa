// Generated by rstantools.  Do not edit by hand.

/*
    igt is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    igt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with igt.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_likelihood_igt_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 105> locations_array__ =
  {" (found before start of program)",
  " (in 'likelihood_igt', line 112, column 4 to column 25)",
  " (in 'likelihood_igt', line 113, column 4 to column 25)",
  " (in 'likelihood_igt', line 114, column 4 to column 29)",
  " (in 'likelihood_igt', line 115, column 4 to column 11)",
  " (in 'likelihood_igt', line 116, column 4 to column 13)",
  " (in 'likelihood_igt', line 117, column 4 to column 15)",
  " (in 'likelihood_igt', line 119, column 8 to column 17)",
  " (in 'likelihood_igt', line 118, column 26 to line 120, column 5)",
  " (in 'likelihood_igt', line 118, column 4 to line 120, column 5)",
  " (in 'likelihood_igt', line 121, column 4 to column 19)",
  " (in 'likelihood_igt', line 125, column 8 to column 75)",
  " (in 'likelihood_igt', line 127, column 8 to column 76)",
  " (in 'likelihood_igt', line 129, column 8 to column 73)",
  " (in 'likelihood_igt', line 131, column 8 to column 31)",
  " (in 'likelihood_igt', line 132, column 8 to column 32)",
  " (in 'likelihood_igt', line 123, column 27 to line 133, column 5)",
  " (in 'likelihood_igt', line 123, column 4 to line 133, column 5)",
  " (in 'likelihood_igt', line 134, column 4 to column 26)",
  " (in 'likelihood_igt', line 94, column 2 to column 26)",
  " (in 'likelihood_igt', line 95, column 2 to column 25)",
  " (in 'likelihood_igt', line 96, column 2 to column 23)",
  " (in 'likelihood_igt', line 97, column 2 to column 24)",
  " (in 'likelihood_igt', line 98, column 2 to column 27)",
  " (in 'likelihood_igt', line 99, column 2 to column 38)",
  " (in 'likelihood_igt', line 100, column 2 to column 39)",
  " (in 'likelihood_igt', line 101, column 2 to column 42)",
  " (in 'likelihood_igt', line 102, column 22 to column 44)",
  " (in 'likelihood_igt', line 102, column 2 to column 46)",
  " (in 'likelihood_igt', line 103, column 23 to column 46)",
  " (in 'likelihood_igt', line 103, column 2 to column 48)",
  " (in 'likelihood_igt', line 104, column 26 to column 52)",
  " (in 'likelihood_igt', line 104, column 2 to column 54)",
  " (in 'likelihood_igt', line 105, column 9 to column 19)",
  " (in 'likelihood_igt', line 105, column 2 to column 25)",
  " (in 'likelihood_igt', line 106, column 9 to column 19)",
  " (in 'likelihood_igt', line 106, column 2 to column 26)",
  " (in 'likelihood_igt', line 107, column 13 to column 23)",
  " (in 'likelihood_igt', line 107, column 2 to column 25)",
  " (in 'likelihood_igt', line 112, column 11 to column 20)",
  " (in 'likelihood_igt', line 113, column 12 to column 21)",
  " (in 'likelihood_igt', line 114, column 11 to column 21)",
  " (in 'likelihood_igt', line 5, column 4 to column 44)",
  " (in 'likelihood_igt', line 4, column 49 to line 6, column 1)",
  " (in 'likelihood_igt', line 10, column 4 to column 26)",
  " (in 'likelihood_igt', line 14, column 8 to column 48)",
  " (in 'likelihood_igt', line 13, column 11 to line 15, column 5)",
  " (in 'likelihood_igt', line 12, column 8 to column 32)",
  " (in 'likelihood_igt', line 11, column 17 to line 13, column 5)",
  " (in 'likelihood_igt', line 11, column 4 to line 15, column 5)",
  " (in 'likelihood_igt', line 9, column 49 to line 16, column 1)",
  " (in 'likelihood_igt', line 20, column 4 to column 63)",
  " (in 'likelihood_igt', line 19, column 50 to line 21, column 1)",
  " (in 'likelihood_igt', line 25, column 11 to column 26)",
  " (in 'likelihood_igt', line 25, column 4 to column 47)",
  " (in 'likelihood_igt', line 26, column 4 to column 32)",
  " (in 'likelihood_igt', line 27, column 4 to column 17)",
  " (in 'likelihood_igt', line 24, column 59 to line 28, column 1)",
  " (in 'likelihood_igt', line 32, column 11 to column 26)",
  " (in 'likelihood_igt', line 32, column 4 to column 38)",
  " (in 'likelihood_igt', line 33, column 4 to column 56)",
  " (in 'likelihood_igt', line 34, column 4 to column 17)",
  " (in 'likelihood_igt', line 31, column 59 to line 35, column 1)",
  " (in 'likelihood_igt', line 39, column 11 to column 26)",
  " (in 'likelihood_igt', line 39, column 4 to column 53)",
  " (in 'likelihood_igt', line 40, column 4 to column 52)",
  " (in 'likelihood_igt', line 41, column 4 to column 17)",
  " (in 'likelihood_igt', line 38, column 58 to line 42, column 1)",
  " (in 'likelihood_igt', line 46, column 4 to column 31)",
  " (in 'likelihood_igt', line 45, column 40 to line 47, column 1)",
  " (in 'likelihood_igt', line 51, column 4 to column 32)",
  " (in 'likelihood_igt', line 50, column 40 to line 52, column 1)",
  " (in 'likelihood_igt', line 63, column 8 to column 17)",
  " (in 'likelihood_igt', line 62, column 11 to line 64, column 5)",
  " (in 'likelihood_igt', line 61, column 8 to column 43)",
  " (in 'likelihood_igt', line 60, column 24 to line 62, column 5)",
  " (in 'likelihood_igt', line 60, column 11 to line 64, column 5)",
  " (in 'likelihood_igt', line 59, column 8 to column 42)",
  " (in 'likelihood_igt', line 58, column 24 to line 60, column 5)",
  " (in 'likelihood_igt', line 58, column 11 to line 64, column 5)",
  " (in 'likelihood_igt', line 57, column 8 to column 42)",
  " (in 'likelihood_igt', line 56, column 17 to line 58, column 5)",
  " (in 'likelihood_igt', line 56, column 4 to line 64, column 5)",
  " (in 'likelihood_igt', line 54, column 54 to line 66, column 1)",
  " (in 'likelihood_igt', line 77, column 8 to column 17)",
  " (in 'likelihood_igt', line 76, column 11 to line 78, column 5)",
  " (in 'likelihood_igt', line 75, column 8 to column 43)",
  " (in 'likelihood_igt', line 74, column 24 to line 76, column 5)",
  " (in 'likelihood_igt', line 74, column 11 to line 78, column 5)",
  " (in 'likelihood_igt', line 73, column 8 to column 44)",
  " (in 'likelihood_igt', line 72, column 24 to line 74, column 5)",
  " (in 'likelihood_igt', line 72, column 11 to line 78, column 5)",
  " (in 'likelihood_igt', line 71, column 8 to column 44)",
  " (in 'likelihood_igt', line 70, column 17 to line 72, column 5)",
  " (in 'likelihood_igt', line 70, column 4 to line 78, column 5)",
  " (in 'likelihood_igt', line 68, column 63 to line 80, column 1)",
  " (in 'likelihood_igt', line 89, column 8 to column 17)",
  " (in 'likelihood_igt', line 88, column 11 to line 90, column 5)",
  " (in 'likelihood_igt', line 87, column 8 to column 39)",
  " (in 'likelihood_igt', line 86, column 24 to line 88, column 5)",
  " (in 'likelihood_igt', line 86, column 11 to line 90, column 5)",
  " (in 'likelihood_igt', line 85, column 8 to column 39)",
  " (in 'likelihood_igt', line 84, column 17 to line 86, column 5)",
  " (in 'likelihood_igt', line 84, column 4 to line 90, column 5)",
  " (in 'likelihood_igt', line 82, column 44 to line 91, column 1)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
utility_EU(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
           std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
utility_PU(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
           std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
utility_PU2(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
            std::ostream* pstream__);
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_DRL(const T0__& V_arg__, const T1__& u, const int& sel,
             const std::vector<T3__>& par, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_DEL(const T0__& V_arg__, const T1__& u, const int& sel,
             const std::vector<T3__>& par, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_ML(const T0__& V_arg__, const T1__& u, const int& sel,
            const std::vector<T3__>& par, std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T1__>
temperature_TDC(const int& t, const std::vector<T1__>& par, std::ostream*
                pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T1__>
temperature_TIC(const int& t, const std::vector<T1__>& par, std::ostream*
                pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
utility(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
        const int& ind, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating(const T0__& V_arg__, const T1__& u, const int& sel,
         const std::vector<T3__>& par, const int& ind, std::ostream*
         pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T1__>
temperature(const int& t, const std::vector<T1__>& par, const int& ind,
            std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
utility_EU(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 42;
    return (((1 - stan::model::rvalue(par, "par", stan::model::index_uni(1)))
           * win) -
           (stan::model::rvalue(par, "par", stan::model::index_uni(1)) *
           loss));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
utility_PU(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ net = DUMMY_VAR__;
    current_statement__ = 44;
    net = (win - loss);
    current_statement__ = 49;
    if (stan::math::logical_gte(net, 0)) {
      current_statement__ = 47;
      return stan::math::pow(net,
               stan::model::rvalue(par, "par", stan::model::index_uni(1)));
    } else {
      current_statement__ = 45;
      return (-stan::model::rvalue(par, "par", stan::model::index_uni(2)) *
             stan::math::pow(stan::math::fabs(net),
               stan::model::rvalue(par, "par", stan::model::index_uni(1))));
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
utility_PU2(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 51;
    return (stan::math::pow(win,
              stan::model::rvalue(par, "par", stan::model::index_uni(1)))
           - (stan::model::rvalue(par, "par", stan::model::index_uni(2)) *
           stan::math::pow(stan::math::fabs(loss),
             stan::model::rvalue(par, "par", stan::model::index_uni(1)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_DRL(const T0__& V_arg__, const T1__& u, const int& sel,
             const std::vector<T3__>& par, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T3__>;
  int current_statement__ = 0;
  const auto& V = stan::math::to_ref(V_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 53;
    stan::math::validate_non_negative_index("V_new", "num_elements(V)",
      stan::math::num_elements(V));
    Eigen::Matrix<local_scalar_t__,-1,1> V_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       V), DUMMY_VAR__);
    current_statement__ = 54;
    stan::model::assign(V_new,
      stan::math::multiply(
        stan::model::rvalue(par, "par", stan::model::index_uni(1)), V),
      "assigning variable V_new");
    current_statement__ = 55;
    stan::model::assign(V_new,
      (stan::model::rvalue(V_new, "V_new", stan::model::index_uni(sel)) + u),
      "assigning variable V_new", stan::model::index_uni(sel));
    current_statement__ = 56;
    return V_new;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_DEL(const T0__& V_arg__, const T1__& u, const int& sel,
             const std::vector<T3__>& par, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T3__>;
  int current_statement__ = 0;
  const auto& V = stan::math::to_ref(V_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 58;
    stan::math::validate_non_negative_index("V_new", "num_elements(V)",
      stan::math::num_elements(V));
    Eigen::Matrix<local_scalar_t__,-1,1> V_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       V), DUMMY_VAR__);
    current_statement__ = 59;
    stan::model::assign(V_new, V, "assigning variable V_new");
    current_statement__ = 60;
    stan::model::assign(V_new,
      (stan::model::rvalue(V_new, "V_new", stan::model::index_uni(sel)) +
      (stan::model::rvalue(par, "par", stan::model::index_uni(1)) * (u -
      stan::model::rvalue(V_new, "V_new", stan::model::index_uni(sel))))),
      "assigning variable V_new", stan::model::index_uni(sel));
    current_statement__ = 61;
    return V_new;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating_ML(const T0__& V_arg__, const T1__& u, const int& sel,
            const std::vector<T3__>& par, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T3__>;
  int current_statement__ = 0;
  const auto& V = stan::math::to_ref(V_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 63;
    stan::math::validate_non_negative_index("V_new", "num_elements(V)",
      stan::math::num_elements(V));
    Eigen::Matrix<local_scalar_t__,-1,1> V_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       V), DUMMY_VAR__);
    current_statement__ = 64;
    stan::model::assign(V_new,
      stan::math::multiply((1 -
        stan::model::rvalue(par, "par", stan::model::index_uni(1))), V),
      "assigning variable V_new");
    current_statement__ = 65;
    stan::model::assign(V_new,
      (stan::model::rvalue(par, "par", stan::model::index_uni(2)) * (u - ((1
      - stan::model::rvalue(par, "par", stan::model::index_uni(1))) *
      stan::model::rvalue(V, "V", stan::model::index_uni(sel))))),
      "assigning variable V_new", stan::model::index_uni(sel));
    current_statement__ = 66;
    return V_new;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, stan::require_all_t<stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T1__>
temperature_TDC(const int& t, const std::vector<T1__>& par, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 68;
    return stan::math::pow((t / 10.0),
             stan::model::rvalue(par, "par", stan::model::index_uni(1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, stan::require_all_t<stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T1__>
temperature_TIC(const int& t, const std::vector<T1__>& par, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 70;
    return (stan::math::pow(3.0,
              stan::model::rvalue(par, "par", stan::model::index_uni(1)))
           - 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
utility(const T0__& win, const T1__& loss, const std::vector<T2__>& par,
        const int& ind, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 82;
    if (stan::math::logical_eq(ind, 1)) {
      current_statement__ = 80;
      return utility_EU(win, loss, par, pstream__);
    } else {
      current_statement__ = 79;
      if (stan::math::logical_eq(ind, 2)) {
        current_statement__ = 77;
        return utility_PU(win, loss, par, pstream__);
      } else {
        current_statement__ = 76;
        if (stan::math::logical_eq(ind, 3)) {
          current_statement__ = 74;
          return utility_PU2(win, loss, par, pstream__);
        } else {
          current_statement__ = 72;
          return 0;
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T3__>,-1,1>
updating(const T0__& V_arg__, const T1__& u, const int& sel,
         const std::vector<T3__>& par, const int& ind, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T3__>;
  int current_statement__ = 0;
  const auto& V = stan::math::to_ref(V_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 94;
    if (stan::math::logical_eq(ind, 1)) {
      current_statement__ = 92;
      return updating_DRL(V, u, sel, par, pstream__);
    } else {
      current_statement__ = 91;
      if (stan::math::logical_eq(ind, 2)) {
        current_statement__ = 89;
        return updating_DEL(V, u, sel, par, pstream__);
      } else {
        current_statement__ = 88;
        if (stan::math::logical_eq(ind, 3)) {
          current_statement__ = 86;
          return updating_ML(V, u, sel, par, pstream__);
        } else {
          current_statement__ = 84;
          return V;
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, stan::require_all_t<stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T1__>
temperature(const int& t, const std::vector<T1__>& par, const int& ind,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 103;
    if (stan::math::logical_eq(ind, 1)) {
      current_statement__ = 101;
      return temperature_TDC(t, par, pstream__);
    } else {
      current_statement__ = 100;
      if (stan::math::logical_eq(ind, 2)) {
        current_statement__ = 98;
        return temperature_TIC(t, par, pstream__);
      } else {
        current_statement__ = 96;
        return 1;
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_likelihood_igt final : public model_base_crtp<model_likelihood_igt> {
private:
  int NUM_TRIALS;
  int NUM_DECKS;
  int UTILITY_FUNCTION;
  int UPDATING_FUNCTION;
  int TEMPERATURE_FUNCTION;
  int NUM_UTILITY_PARAMETERS;
  int NUM_UPDATING_PARAMETERS;
  int NUM_TEMPERATURE_PARAMETERS;
  std::vector<double> utility_params;
  std::vector<double> updating_params;
  std::vector<double> temperature_params;
  Eigen::Matrix<double,-1,1> win_data__;
  Eigen::Matrix<double,-1,1> loss_data__;
  std::vector<int> choice;
  Eigen::Map<Eigen::Matrix<double,-1,1>> win{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> loss{nullptr, 0};
public:
  ~model_likelihood_igt() {}
  model_likelihood_igt(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_likelihood_igt_namespace::model_likelihood_igt";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization", "NUM_TRIALS", "int",
        std::vector<size_t>{});
      NUM_TRIALS = std::numeric_limits<int>::min();
      current_statement__ = 19;
      NUM_TRIALS = context__.vals_i("NUM_TRIALS")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "NUM_TRIALS",
        NUM_TRIALS, 0);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "NUM_DECKS", "int",
        std::vector<size_t>{});
      NUM_DECKS = std::numeric_limits<int>::min();
      current_statement__ = 20;
      NUM_DECKS = context__.vals_i("NUM_DECKS")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "NUM_DECKS", NUM_DECKS,
        0);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "UTILITY_FUNCTION",
        "int", std::vector<size_t>{});
      UTILITY_FUNCTION = std::numeric_limits<int>::min();
      current_statement__ = 21;
      UTILITY_FUNCTION = context__.vals_i("UTILITY_FUNCTION")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization", "UPDATING_FUNCTION",
        "int", std::vector<size_t>{});
      UPDATING_FUNCTION = std::numeric_limits<int>::min();
      current_statement__ = 22;
      UPDATING_FUNCTION = context__.vals_i("UPDATING_FUNCTION")[(1 - 1)];
      current_statement__ = 23;
      context__.validate_dims("data initialization", "TEMPERATURE_FUNCTION",
        "int", std::vector<size_t>{});
      TEMPERATURE_FUNCTION = std::numeric_limits<int>::min();
      current_statement__ = 23;
      TEMPERATURE_FUNCTION = context__.vals_i("TEMPERATURE_FUNCTION")[(1 -
        1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization",
        "NUM_UTILITY_PARAMETERS", "int", std::vector<size_t>{});
      NUM_UTILITY_PARAMETERS = std::numeric_limits<int>::min();
      current_statement__ = 24;
      NUM_UTILITY_PARAMETERS = context__.vals_i("NUM_UTILITY_PARAMETERS")[(1
        - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__,
        "NUM_UTILITY_PARAMETERS", NUM_UTILITY_PARAMETERS, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization",
        "NUM_UPDATING_PARAMETERS", "int", std::vector<size_t>{});
      NUM_UPDATING_PARAMETERS = std::numeric_limits<int>::min();
      current_statement__ = 25;
      NUM_UPDATING_PARAMETERS = context__.vals_i("NUM_UPDATING_PARAMETERS")[(1
        - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__,
        "NUM_UPDATING_PARAMETERS", NUM_UPDATING_PARAMETERS, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization",
        "NUM_TEMPERATURE_PARAMETERS", "int", std::vector<size_t>{});
      NUM_TEMPERATURE_PARAMETERS = std::numeric_limits<int>::min();
      current_statement__ = 26;
      NUM_TEMPERATURE_PARAMETERS = context__.vals_i("NUM_TEMPERATURE_PARAMETERS")[(1
        - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__,
        "NUM_TEMPERATURE_PARAMETERS", NUM_TEMPERATURE_PARAMETERS, 0);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("utility_params",
        "NUM_UTILITY_PARAMETERS", NUM_UTILITY_PARAMETERS);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "utility_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(NUM_UTILITY_PARAMETERS)});
      utility_params = std::vector<double>(NUM_UTILITY_PARAMETERS,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      utility_params = context__.vals_r("utility_params");
      current_statement__ = 29;
      stan::math::validate_non_negative_index("updating_params",
        "NUM_UPDATING_PARAMETERS", NUM_UPDATING_PARAMETERS);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "updating_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(NUM_UPDATING_PARAMETERS)});
      updating_params = std::vector<double>(NUM_UPDATING_PARAMETERS,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      updating_params = context__.vals_r("updating_params");
      current_statement__ = 31;
      stan::math::validate_non_negative_index("temperature_params",
        "NUM_TEMPERATURE_PARAMETERS", NUM_TEMPERATURE_PARAMETERS);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "temperature_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(NUM_TEMPERATURE_PARAMETERS)});
      temperature_params = std::vector<double>(NUM_TEMPERATURE_PARAMETERS,
                             std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 32;
      temperature_params = context__.vals_r("temperature_params");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("win", "NUM_TRIALS", NUM_TRIALS);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "win", "double",
        std::vector<size_t>{static_cast<size_t>(NUM_TRIALS)});
      win_data__ = Eigen::Matrix<double,-1,1>::Constant(NUM_TRIALS,
                     std::numeric_limits<double>::quiet_NaN());
      new (&win) Eigen::Map<Eigen::Matrix<double,-1,1>>(win_data__.data(),
        NUM_TRIALS);
      {
        std::vector<local_scalar_t__> win_flat__;
        current_statement__ = 34;
        win_flat__ = context__.vals_r("win");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= NUM_TRIALS; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(win, win_flat__[(pos__ - 1)],
            "assigning variable win", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("loss", "NUM_TRIALS",
        NUM_TRIALS);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "loss", "double",
        std::vector<size_t>{static_cast<size_t>(NUM_TRIALS)});
      loss_data__ = Eigen::Matrix<double,-1,1>::Constant(NUM_TRIALS,
                      std::numeric_limits<double>::quiet_NaN());
      new (&loss) Eigen::Map<Eigen::Matrix<double,-1,1>>(loss_data__.data(),
        NUM_TRIALS);
      {
        std::vector<local_scalar_t__> loss_flat__;
        current_statement__ = 36;
        loss_flat__ = context__.vals_r("loss");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= NUM_TRIALS; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(loss, loss_flat__[(pos__ - 1)],
            "assigning variable loss", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("choice", "NUM_TRIALS",
        NUM_TRIALS);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "choice", "int",
        std::vector<size_t>{static_cast<size_t>(NUM_TRIALS)});
      choice = std::vector<int>(NUM_TRIALS, std::numeric_limits<int>::min());
      current_statement__ = 38;
      choice = context__.vals_i("choice");
      current_statement__ = 39;
      stan::math::validate_non_negative_index("V", "NUM_DECKS", NUM_DECKS);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("P", "NUM_DECKS", NUM_DECKS);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("probs", "NUM_TRIALS",
        NUM_TRIALS);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_likelihood_igt";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_likelihood_igt_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_likelihood_igt_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> V =
        Eigen::Matrix<double,-1,1>::Constant(NUM_DECKS,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> P =
        Eigen::Matrix<double,-1,1>::Constant(NUM_DECKS,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> probs =
        Eigen::Matrix<double,-1,1>::Constant(NUM_TRIALS,
          std::numeric_limits<double>::quiet_NaN());
      double U = std::numeric_limits<double>::quiet_NaN();
      double lhd = std::numeric_limits<double>::quiet_NaN();
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      for (int d = 1; d <= NUM_DECKS; ++d) {
        current_statement__ = 7;
        stan::model::assign(V, 0, "assigning variable V",
          stan::model::index_uni(d));
      }
      current_statement__ = 10;
      stan::model::assign(probs, .25, "assigning variable probs",
        stan::model::index_uni(1));
      current_statement__ = 17;
      for (int t = 2; t <= NUM_TRIALS; ++t) {
        current_statement__ = 11;
        U = utility(
              stan::model::rvalue(win, "win", stan::model::index_uni((t - 1))),
              stan::model::rvalue(loss, "loss",
                stan::model::index_uni((t - 1))), utility_params,
              UTILITY_FUNCTION, pstream__);
        current_statement__ = 12;
        stan::model::assign(V,
          updating(stan::model::deep_copy(V), U,
            stan::model::rvalue(choice, "choice",
              stan::model::index_uni((t - 1))), updating_params,
            UPDATING_FUNCTION, pstream__), "assigning variable V");
        current_statement__ = 13;
        theta = temperature(t, temperature_params, TEMPERATURE_FUNCTION,
                  pstream__);
        current_statement__ = 14;
        stan::model::assign(P,
          stan::math::softmax(stan::math::multiply(theta, V)),
          "assigning variable P");
        current_statement__ = 15;
        stan::model::assign(probs,
          stan::model::rvalue(P, "P",
            stan::model::index_uni(
              stan::model::rvalue(choice, "choice", stan::model::index_uni(t)))),
          "assigning variable probs", stan::model::index_uni(t));
      }
      current_statement__ = 18;
      lhd = stan::math::sum(stan::math::log(probs));
      current_statement__ = 2;
      stan::math::check_simplex(function__, "P", P);
      out__.write(V);
      out__.write(P);
      out__.write(probs);
      out__.write(U);
      out__.write(lhd);
      out__.write(theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"V", "P", "probs", "U", "lhd", "theta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(NUM_DECKS)},
             std::vector<size_t>{static_cast<size_t>(NUM_DECKS)},
             std::vector<size_t>{static_cast<size_t>(NUM_TRIALS)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= NUM_DECKS; ++sym1__) {
        param_names__.emplace_back(std::string() + "V" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= NUM_DECKS; ++sym1__) {
        param_names__.emplace_back(std::string() + "P" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= NUM_TRIALS; ++sym1__) {
        param_names__.emplace_back(std::string() + "probs" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "U");
      param_names__.emplace_back(std::string() + "lhd");
      param_names__.emplace_back(std::string() + "theta");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= NUM_DECKS; ++sym1__) {
        param_names__.emplace_back(std::string() + "V" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= (NUM_DECKS - 1); ++sym1__) {
        param_names__.emplace_back(std::string() + "P" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= NUM_TRIALS; ++sym1__) {
        param_names__.emplace_back(std::string() + "probs" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "U");
      param_names__.emplace_back(std::string() + "lhd");
      param_names__.emplace_back(std::string() + "theta");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NUM_DECKS) + "},\"block\":\"generated_quantities\"},{\"name\":\"P\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NUM_DECKS) + "},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NUM_TRIALS) + "},\"block\":\"generated_quantities\"},{\"name\":\"U\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lhd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"V\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NUM_DECKS) + "},\"block\":\"generated_quantities\"},{\"name\":\"P\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((NUM_DECKS -1)) + "},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NUM_TRIALS) + "},\"block\":\"generated_quantities\"},{\"name\":\"U\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lhd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((NUM_DECKS + NUM_DECKS) + NUM_TRIALS) + 1) + 1) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((NUM_DECKS + NUM_DECKS) + NUM_TRIALS) + 1) + 1) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_likelihood_igt_namespace::model_likelihood_igt;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_likelihood_igt_namespace::profiles__;
}
#endif
#endif
